// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "saul rojas coila",
            "email": "luckly083@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api": {
            "get": {
                "description": "An endpoint used to test the api stability",
                "produces": [
                    "application/json"
                ],
                "summary": "Hello message from the api",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.helloApiMessage"
                        }
                    }
                }
            }
        },
        "/api/youtube/analysis": {
            "post": {
                "description": "An endpoint used to analyze the content of a video using BERT and RoBERTa model and ChatGPT.",
                "produces": [
                    "application/json"
                ],
                "summary": "Performs the analysis of the youtube video",
                "parameters": [
                    {
                        "description": "Youtube video analysis request body",
                        "name": "video",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.YoutubeAnalyzerReqBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.YoutubeAnalyzerRespBody"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    }
                }
            }
        },
        "/api/youtube/analysis-landing": {
            "post": {
                "description": "An endpoint used to do a simple analysis with the BERT model to show a result in the landing",
                "produces": [
                    "application/json"
                ],
                "summary": "Simple analysis with BERT model for the landing page",
                "parameters": [
                    {
                        "description": "Youtube video id",
                        "name": "video",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.YoutubeAnalyzerLandingReqBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.YoutubeAnalyzerLandingRespBody"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    }
                }
            }
        },
        "/api/youtube/pre-analysis": {
            "post": {
                "description": "An endpoint used to retrieve basic information about the youtube video such as title, description, etc.",
                "produces": [
                    "application/json"
                ],
                "summary": "Basic information about the youtube video",
                "parameters": [
                    {
                        "description": "Youtube video id",
                        "name": "video",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.YoutubePreAnalyzerReqBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.YoutubePreAnalyzerRespBody"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    }
                }
            }
        },
        "/api/youtube/videos": {
            "get": {
                "description": "An endpoint to retrieve all the youtube videos that a user has analyzed, results are sorted by last_update field.",
                "produces": [
                    "application/json"
                ],
                "summary": "Get all the videos related to a user in paginated mode",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the user id",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "the queried page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size for the results (default: 10, max: 50)",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.YoutubeVideosRespBody"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    }
                }
            }
        },
        "/api/youtube/videos/{videoId}": {
            "get": {
                "description": "An endpoint to retrieve the data for a video and its analysis results.",
                "produces": [
                    "application/json"
                ],
                "summary": "Get the analysis results and data for a video",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the video id to be queried",
                        "name": "videoId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "the user id",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.YoutubeVideoAnalyzed"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    }
                }
            }
        },
        "/api/youtube/videos/{videoId}/negative-comments": {
            "get": {
                "description": "An endpoint to retrieve the data for a video and its analysis results.",
                "produces": [
                    "application/json"
                ],
                "summary": "Get the analysis results and data for a video",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the video id to be queried",
                        "name": "videoId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "the user_id",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "the queried page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size for the results (default: 10, max: 50)",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.YoutubeVideoNegativeCommentsRespBody"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    }
                }
            }
        },
        "/billing": {
            "get": {
                "description": "An endpoint used to test the billing api stability",
                "produces": [
                    "application/json"
                ],
                "summary": "Hello message from the billing api",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.helloApiMessage"
                        }
                    }
                }
            }
        },
        "/billing/cancel-subscription": {
            "get": {
                "description": "An endpoint to cancel a subscription",
                "produces": [
                    "application/json"
                ],
                "summary": "Cancel a subscription",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the subscription id",
                        "name": "subscription_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    }
                }
            }
        },
        "/billing/checkout": {
            "get": {
                "description": "An endpoint to retrieve the URL for a subscription plan sending\nthe account email as well.",
                "produces": [
                    "application/json"
                ],
                "summary": "Get the checkout URL for a subscription plan",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the variant id of the subscription plan",
                        "name": "variant_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "the user id",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/lemonsqueezy.ApiResponse-lemonsqueezy_CheckoutAttributes-lemonsqueezy_ApiResponseRelationshipsDiscount"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    }
                }
            }
        },
        "/billing/invoices": {
            "get": {
                "description": "An endpoint to retrieve the invoices from a user's subscription",
                "produces": [
                    "application/json"
                ],
                "summary": "Get the latest Invoices from a subscription",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the subscription id",
                        "name": "subscription_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "the queried page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size for the results (default: 10, max: 50)",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/lemonsqueezy.ApiResponseList-lemonsqueezy_SubscriptionInvoiceAttributes-lemonsqueezy_ApiResponseRelationshipsSubscriptionInvoice"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    }
                }
            }
        },
        "/billing/resume-subscription": {
            "get": {
                "description": "An endpoint to resume a cancelled subscription",
                "produces": [
                    "application/json"
                ],
                "summary": "Resume a subscription",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the subscription id",
                        "name": "subscription_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    }
                }
            }
        },
        "/billing/subscription-plans": {
            "get": {
                "description": "An endpoint to retrieve the subscription plan offered by GPTube with its price, features, etc.",
                "produces": [
                    "application/json"
                ],
                "summary": "Get the subscription plans offered by GPTube",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.SubscriptionPlan"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    }
                }
            }
        },
        "/billing/subscriptions": {
            "get": {
                "description": "An endpoint to retrieve all the subscriptions belonging to an account",
                "produces": [
                    "application/json"
                ],
                "summary": "Get the subscribed subscriptions of an account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the user id",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Subscription"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    }
                }
            }
        },
        "/billing/update-payment-method": {
            "get": {
                "description": "An endpoint to retrieve the URL to update the payment method for a subscription",
                "produces": [
                    "application/json"
                ],
                "summary": "Get the update payment method URL for a subscription",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the subscription id",
                        "name": "subscription_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/lemonsqueezy.ApiResponse-lemonsqueezy_Subscription-lemonsqueezy_ApiResponseRelationshipsSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "fiber.Error": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "handlers.helloApiMessage": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "lemonsqueezy.ApiResponse-lemonsqueezy_CheckoutAttributes-lemonsqueezy_ApiResponseRelationshipsDiscount": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/lemonsqueezy.ApiResponseData-lemonsqueezy_CheckoutAttributes-lemonsqueezy_ApiResponseRelationshipsDiscount"
                },
                "jsonapi": {
                    "$ref": "#/definitions/lemonsqueezy.ApiResponseJSONAPI"
                },
                "links": {
                    "$ref": "#/definitions/lemonsqueezy.ApiResponseSelfLink"
                }
            }
        },
        "lemonsqueezy.ApiResponse-lemonsqueezy_Subscription-lemonsqueezy_ApiResponseRelationshipsSubscription": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/lemonsqueezy.ApiResponseData-lemonsqueezy_Subscription-lemonsqueezy_ApiResponseRelationshipsSubscription"
                },
                "jsonapi": {
                    "$ref": "#/definitions/lemonsqueezy.ApiResponseJSONAPI"
                },
                "links": {
                    "$ref": "#/definitions/lemonsqueezy.ApiResponseSelfLink"
                }
            }
        },
        "lemonsqueezy.ApiResponseData-lemonsqueezy_CheckoutAttributes-lemonsqueezy_ApiResponseRelationshipsDiscount": {
            "type": "object",
            "properties": {
                "attributes": {
                    "$ref": "#/definitions/lemonsqueezy.CheckoutAttributes"
                },
                "id": {
                    "type": "string"
                },
                "links": {
                    "$ref": "#/definitions/lemonsqueezy.ApiResponseSelfLink"
                },
                "relationships": {
                    "$ref": "#/definitions/lemonsqueezy.ApiResponseRelationshipsDiscount"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "lemonsqueezy.ApiResponseData-lemonsqueezy_Subscription-lemonsqueezy_ApiResponseRelationshipsSubscription": {
            "type": "object",
            "properties": {
                "attributes": {
                    "$ref": "#/definitions/lemonsqueezy.Subscription"
                },
                "id": {
                    "type": "string"
                },
                "links": {
                    "$ref": "#/definitions/lemonsqueezy.ApiResponseSelfLink"
                },
                "relationships": {
                    "$ref": "#/definitions/lemonsqueezy.ApiResponseRelationshipsSubscription"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "lemonsqueezy.ApiResponseData-lemonsqueezy_SubscriptionInvoiceAttributes-lemonsqueezy_ApiResponseRelationshipsSubscriptionInvoice": {
            "type": "object",
            "properties": {
                "attributes": {
                    "$ref": "#/definitions/lemonsqueezy.SubscriptionInvoiceAttributes"
                },
                "id": {
                    "type": "string"
                },
                "links": {
                    "$ref": "#/definitions/lemonsqueezy.ApiResponseSelfLink"
                },
                "relationships": {
                    "$ref": "#/definitions/lemonsqueezy.ApiResponseRelationshipsSubscriptionInvoice"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "lemonsqueezy.ApiResponseJSONAPI": {
            "type": "object",
            "properties": {
                "version": {
                    "type": "string"
                }
            }
        },
        "lemonsqueezy.ApiResponseLink": {
            "type": "object",
            "properties": {
                "related": {
                    "type": "string"
                },
                "self": {
                    "type": "string"
                }
            }
        },
        "lemonsqueezy.ApiResponseLinks": {
            "type": "object",
            "properties": {
                "links": {
                    "$ref": "#/definitions/lemonsqueezy.ApiResponseLink"
                }
            }
        },
        "lemonsqueezy.ApiResponseList-lemonsqueezy_SubscriptionInvoiceAttributes-lemonsqueezy_ApiResponseRelationshipsSubscriptionInvoice": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/lemonsqueezy.ApiResponseData-lemonsqueezy_SubscriptionInvoiceAttributes-lemonsqueezy_ApiResponseRelationshipsSubscriptionInvoice"
                    }
                },
                "jsonapi": {
                    "$ref": "#/definitions/lemonsqueezy.ApiResponseJSONAPI"
                },
                "links": {
                    "$ref": "#/definitions/lemonsqueezy.ApiResponseListLink"
                },
                "meta": {
                    "$ref": "#/definitions/lemonsqueezy.ApiResponseListMeta"
                }
            }
        },
        "lemonsqueezy.ApiResponseListLink": {
            "type": "object",
            "properties": {
                "first": {
                    "type": "string"
                },
                "last": {
                    "type": "string"
                },
                "next": {
                    "type": "string"
                }
            }
        },
        "lemonsqueezy.ApiResponseListMeta": {
            "type": "object",
            "properties": {
                "page": {
                    "$ref": "#/definitions/lemonsqueezy.ApiResponseListMetaPage"
                }
            }
        },
        "lemonsqueezy.ApiResponseListMetaPage": {
            "type": "object",
            "properties": {
                "currentPage": {
                    "type": "integer"
                },
                "from": {
                    "type": "integer"
                },
                "lastPage": {
                    "type": "integer"
                },
                "perPage": {
                    "type": "integer"
                },
                "to": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "lemonsqueezy.ApiResponseRelationshipsDiscount": {
            "type": "object",
            "properties": {
                "discount-redemptions": {
                    "$ref": "#/definitions/lemonsqueezy.ApiResponseLinks"
                },
                "store": {
                    "$ref": "#/definitions/lemonsqueezy.ApiResponseLinks"
                },
                "variants": {
                    "$ref": "#/definitions/lemonsqueezy.ApiResponseLinks"
                }
            }
        },
        "lemonsqueezy.ApiResponseRelationshipsSubscription": {
            "type": "object",
            "properties": {
                "customer": {
                    "$ref": "#/definitions/lemonsqueezy.ApiResponseLinks"
                },
                "order": {
                    "$ref": "#/definitions/lemonsqueezy.ApiResponseLinks"
                },
                "order-item": {
                    "$ref": "#/definitions/lemonsqueezy.ApiResponseLinks"
                },
                "product": {
                    "$ref": "#/definitions/lemonsqueezy.ApiResponseLinks"
                },
                "store": {
                    "$ref": "#/definitions/lemonsqueezy.ApiResponseLinks"
                },
                "subscription-invoices": {
                    "$ref": "#/definitions/lemonsqueezy.ApiResponseLinks"
                },
                "subscription-items": {
                    "$ref": "#/definitions/lemonsqueezy.ApiResponseLinks"
                },
                "variant": {
                    "$ref": "#/definitions/lemonsqueezy.ApiResponseLinks"
                }
            }
        },
        "lemonsqueezy.ApiResponseRelationshipsSubscriptionInvoice": {
            "type": "object",
            "properties": {
                "store": {
                    "$ref": "#/definitions/lemonsqueezy.ApiResponseLinks"
                },
                "subscription": {
                    "$ref": "#/definitions/lemonsqueezy.ApiResponseLinks"
                }
            }
        },
        "lemonsqueezy.ApiResponseSelfLink": {
            "type": "object",
            "properties": {
                "self": {
                    "type": "string"
                }
            }
        },
        "lemonsqueezy.BillingAddress": {
            "type": "object",
            "properties": {
                "country": {
                    "type": "string"
                },
                "zip": {
                    "type": "string"
                }
            }
        },
        "lemonsqueezy.CheckoutAttributes": {
            "type": "object",
            "properties": {
                "checkout_data": {
                    "$ref": "#/definitions/lemonsqueezy.CheckoutData"
                },
                "checkout_options": {
                    "$ref": "#/definitions/lemonsqueezy.CheckoutOptions"
                },
                "created_at": {
                    "type": "string"
                },
                "custom_price": {},
                "expires_at": {
                    "type": "string"
                },
                "product_options": {
                    "$ref": "#/definitions/lemonsqueezy.CheckoutProductOptions"
                },
                "store_id": {
                    "type": "integer"
                },
                "test_mode": {
                    "type": "boolean"
                },
                "updated_at": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "variant_id": {
                    "type": "integer"
                }
            }
        },
        "lemonsqueezy.CheckoutData": {
            "type": "object",
            "properties": {
                "billing_address": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/lemonsqueezy.BillingAddress"
                    }
                },
                "custom": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "discount_code": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "tax_number": {
                    "type": "string"
                }
            }
        },
        "lemonsqueezy.CheckoutOptions": {
            "type": "object",
            "properties": {
                "button_color": {
                    "type": "string"
                },
                "dark": {
                    "type": "boolean"
                },
                "desc": {
                    "type": "boolean"
                },
                "discount": {
                    "type": "boolean"
                },
                "embed": {
                    "type": "boolean"
                },
                "logo": {
                    "type": "boolean"
                },
                "media": {
                    "type": "boolean"
                },
                "subscription_preview": {
                    "type": "boolean"
                }
            }
        },
        "lemonsqueezy.CheckoutProductOptions": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "enabled_variants": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "media": {
                    "type": "array",
                    "items": {}
                },
                "name": {
                    "type": "string"
                },
                "receipt_button_text": {
                    "type": "string"
                },
                "receipt_link_url": {
                    "type": "string"
                },
                "receipt_thank_you_note": {
                    "type": "string"
                },
                "redirect_url": {
                    "type": "string"
                }
            }
        },
        "lemonsqueezy.Subscription": {
            "type": "object",
            "properties": {
                "billing_anchor": {
                    "type": "integer"
                },
                "cancelled": {
                    "type": "boolean"
                },
                "card_brand": {
                    "type": "string"
                },
                "card_last_four": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "customer_id": {
                    "type": "integer"
                },
                "ends_at": {
                    "type": "string"
                },
                "first_subscription_item": {
                    "$ref": "#/definitions/lemonsqueezy.SubscriptionFirstSubscriptionItem"
                },
                "order_id": {
                    "type": "integer"
                },
                "order_item_id": {
                    "type": "integer"
                },
                "pause": {
                    "$ref": "#/definitions/lemonsqueezy.SubscriptionPause"
                },
                "product_id": {
                    "type": "integer"
                },
                "product_name": {
                    "type": "string"
                },
                "renews_at": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "status_formatted": {
                    "type": "string"
                },
                "store_id": {
                    "type": "integer"
                },
                "test_mode": {
                    "type": "boolean"
                },
                "trial_ends_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "urls": {
                    "$ref": "#/definitions/lemonsqueezy.SubscriptionURLs"
                },
                "user_email": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                },
                "variant_id": {
                    "type": "integer"
                },
                "variant_name": {
                    "type": "string"
                }
            }
        },
        "lemonsqueezy.SubscriptionFirstSubscriptionItem": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_usage_based": {
                    "type": "boolean"
                },
                "price_id": {
                    "type": "integer"
                },
                "quantity": {
                    "type": "integer"
                },
                "subscription_id": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "lemonsqueezy.SubscriptionInvoiceAttributes": {
            "type": "object",
            "properties": {
                "billing_reason": {
                    "type": "string"
                },
                "card_brand": {
                    "type": "string"
                },
                "card_last_four": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "currency_rate": {
                    "type": "string"
                },
                "discount_total": {
                    "type": "integer"
                },
                "discount_total_formatted": {
                    "type": "string"
                },
                "discount_total_usd": {
                    "type": "integer"
                },
                "refunded": {
                    "type": "boolean"
                },
                "refunded_at": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "status_formatted": {
                    "type": "string"
                },
                "store_id": {
                    "type": "integer"
                },
                "subscription_id": {
                    "type": "integer"
                },
                "subtotal": {
                    "type": "integer"
                },
                "subtotal_formatted": {
                    "type": "string"
                },
                "subtotal_usd": {
                    "type": "integer"
                },
                "tax": {
                    "type": "integer"
                },
                "tax_formatted": {
                    "type": "string"
                },
                "tax_usd": {
                    "type": "integer"
                },
                "test_mode": {
                    "type": "boolean"
                },
                "total": {
                    "type": "integer"
                },
                "total_formatted": {
                    "type": "string"
                },
                "total_usd": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "urls": {
                    "type": "object",
                    "properties": {
                        "invoice_url": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "lemonsqueezy.SubscriptionPause": {
            "type": "object",
            "properties": {
                "mode": {
                    "type": "string"
                },
                "resumes_at": {
                    "type": "string"
                }
            }
        },
        "lemonsqueezy.SubscriptionURLs": {
            "type": "object",
            "properties": {
                "customer_portal": {
                    "type": "string"
                },
                "update_payment_method": {
                    "type": "string"
                }
            }
        },
        "models.BertAIResults": {
            "type": "object",
            "properties": {
                "errors_count": {
                    "type": "integer"
                },
                "score_1": {
                    "type": "integer"
                },
                "score_2": {
                    "type": "integer"
                },
                "score_3": {
                    "type": "integer"
                },
                "score_4": {
                    "type": "integer"
                },
                "score_5": {
                    "type": "integer"
                },
                "success_count": {
                    "type": "integer"
                }
            }
        },
        "models.RobertaAIResults": {
            "type": "object",
            "properties": {
                "errors_count": {
                    "type": "integer"
                },
                "negative": {
                    "type": "number"
                },
                "neutral": {
                    "type": "number"
                },
                "positive": {
                    "type": "number"
                },
                "success_count": {
                    "type": "integer"
                }
            }
        },
        "models.Subscription": {
            "type": "object",
            "properties": {
                "card_brand": {
                    "type": "string"
                },
                "card_last_four": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "customer_id": {
                    "type": "integer"
                },
                "ends_at": {
                    "type": "string"
                },
                "order_id": {
                    "type": "integer"
                },
                "product_id": {
                    "type": "integer"
                },
                "product_name": {
                    "type": "string"
                },
                "renews_at": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "status_formatted": {
                    "type": "string"
                },
                "subscription_id": {
                    "description": "PK",
                    "type": "string"
                },
                "subscription_plan_slug": {
                    "description": "FK SubscriptionPlan",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.SubscriptionPlanSlug"
                        }
                    ]
                },
                "trial_ends_at": {
                    "type": "string"
                },
                "update_payment_method": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_email": {
                    "type": "string"
                },
                "variant_id": {
                    "type": "integer"
                }
            }
        },
        "models.SubscriptionPlan": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "features": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "href_monthly": {
                    "type": "string"
                },
                "href_yearly": {
                    "type": "string"
                },
                "id": {
                    "description": "PK",
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "most_popular": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "price_monthly": {
                    "type": "number"
                },
                "price_yearly": {
                    "type": "number"
                },
                "product_id": {
                    "type": "string"
                },
                "slug": {
                    "$ref": "#/definitions/models.SubscriptionPlanSlug"
                },
                "updated_at": {
                    "type": "string"
                },
                "variants": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.SubscriptionPlanSlug": {
            "type": "integer",
            "enum": [
                0,
                1,
                2
            ],
            "x-enum-varnames": [
                "FREE",
                "HOBBY",
                "POPULAR"
            ]
        },
        "models.YoutubeAnalysisLandingResults": {
            "type": "object",
            "properties": {
                "bert_results": {
                    "$ref": "#/definitions/models.BertAIResults"
                },
                "video_id": {
                    "type": "string"
                },
                "video_title": {
                    "type": "string"
                }
            }
        },
        "models.YoutubeAnalysisResults": {
            "type": "object",
            "properties": {
                "bert_results": {
                    "$ref": "#/definitions/models.BertAIResults"
                },
                "recommendation_chat_gpt": {
                    "type": "string"
                },
                "roberta_results": {
                    "$ref": "#/definitions/models.RobertaAIResults"
                }
            }
        },
        "models.YoutubeAnalyzerLandingReqBody": {
            "type": "object",
            "properties": {
                "video_id": {
                    "type": "string",
                    "example": "1xoy8Q5o8ws"
                }
            }
        },
        "models.YoutubeAnalyzerLandingRespBody": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "results": {
                    "$ref": "#/definitions/models.YoutubeAnalysisLandingResults"
                },
                "snippet": {
                    "$ref": "#/definitions/youtube.VideoSnippet"
                },
                "video_id": {
                    "type": "string"
                }
            }
        },
        "models.YoutubeAnalyzerReqBody": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "the email to send the results",
                    "type": "string"
                },
                "user_id": {
                    "description": "The account user id",
                    "type": "string"
                },
                "video_id": {
                    "description": "the video id to analyze",
                    "type": "string"
                }
            }
        },
        "models.YoutubeAnalyzerRespBody": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "video_id": {
                    "type": "string"
                },
                "video_results": {
                    "$ref": "#/definitions/models.YoutubeVideoAnalyzed"
                }
            }
        },
        "models.YoutubePreAnalyzerReqBody": {
            "type": "object",
            "properties": {
                "video_id": {
                    "type": "string"
                }
            }
        },
        "models.YoutubePreAnalyzerRespBody": {
            "type": "object",
            "properties": {
                "requires_email": {
                    "type": "boolean"
                },
                "snippet": {
                    "$ref": "#/definitions/youtube.VideoSnippet"
                },
                "statistics": {
                    "$ref": "#/definitions/youtube.VideoStatistics"
                },
                "video_id": {
                    "type": "string"
                }
            }
        },
        "models.YoutubeVideoAnalyzed": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "last_update": {
                    "type": "string"
                },
                "results": {
                    "$ref": "#/definitions/models.YoutubeAnalysisResults"
                },
                "snippet": {
                    "$ref": "#/definitions/youtube.VideoSnippet"
                },
                "video_id": {
                    "type": "string"
                }
            }
        },
        "models.YoutubeVideoDashboard": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "last_update": {
                    "type": "string"
                },
                "snippet": {
                    "$ref": "#/definitions/youtube.VideoSnippet"
                },
                "video_id": {
                    "type": "string"
                }
            }
        },
        "models.YoutubeVideoNegativeCommentsRespBody": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 10
                },
                "next": {
                    "type": "string",
                    "example": "http://example.com"
                },
                "previous": {
                    "type": "string",
                    "example": "http://example.com"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/youtube.Comment"
                    }
                }
            }
        },
        "models.YoutubeVideosRespBody": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 10
                },
                "next": {
                    "type": "string",
                    "example": "http://example.com"
                },
                "previous": {
                    "type": "string",
                    "example": "http://example.com"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.YoutubeVideoDashboard"
                    }
                }
            }
        },
        "youtube.Comment": {
            "type": "object",
            "properties": {
                "etag": {
                    "description": "Etag: Etag of this resource.",
                    "type": "string"
                },
                "id": {
                    "description": "Id: The ID that YouTube uses to uniquely identify the comment.",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind: Identifies what kind of resource this is. Value: the fixed\nstring \"youtube#comment\".",
                    "type": "string"
                },
                "snippet": {
                    "description": "Snippet: The snippet object contains basic details about the comment.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/youtube.CommentSnippet"
                        }
                    ]
                }
            }
        },
        "youtube.CommentSnippet": {
            "type": "object",
            "properties": {
                "authorChannelId": {
                    "$ref": "#/definitions/youtube.CommentSnippetAuthorChannelId"
                },
                "authorChannelUrl": {
                    "description": "AuthorChannelUrl: Link to the author's YouTube channel, if any.",
                    "type": "string"
                },
                "authorDisplayName": {
                    "description": "AuthorDisplayName: The name of the user who posted the comment.",
                    "type": "string"
                },
                "authorProfileImageUrl": {
                    "description": "AuthorProfileImageUrl: The URL for the avatar of the user who posted\nthe comment.",
                    "type": "string"
                },
                "canRate": {
                    "description": "CanRate: Whether the current viewer can rate this comment.",
                    "type": "boolean"
                },
                "channelId": {
                    "description": "ChannelId: The id of the corresponding YouTube channel. In case of a\nchannel comment this is the channel the comment refers to. In case of\na video comment it's the video's channel.",
                    "type": "string"
                },
                "likeCount": {
                    "description": "LikeCount: The total number of likes this comment has received.",
                    "type": "integer"
                },
                "moderationStatus": {
                    "description": "ModerationStatus: The comment's moderation status. Will not be set if\nthe comments were requested through the id filter.\n\nPossible values:\n  \"published\" - The comment is available for public display.\n  \"heldForReview\" - The comment is awaiting review by a moderator.\n  \"likelySpam\"\n  \"rejected\" - The comment is unfit for display.",
                    "type": "string"
                },
                "parentId": {
                    "description": "ParentId: The unique id of the parent comment, only set for replies.",
                    "type": "string"
                },
                "publishedAt": {
                    "description": "PublishedAt: The date and time when the comment was originally\npublished.",
                    "type": "string"
                },
                "textDisplay": {
                    "description": "TextDisplay: The comment's text. The format is either plain text or\nHTML dependent on what has been requested. Even the plain text\nrepresentation may differ from the text originally posted in that it\nmay replace video links with video titles etc.",
                    "type": "string"
                },
                "textOriginal": {
                    "description": "TextOriginal: The comment's original raw text as initially posted or\nlast updated. The original text will only be returned if it is\naccessible to the viewer, which is only guaranteed if the viewer is\nthe comment's author.",
                    "type": "string"
                },
                "updatedAt": {
                    "description": "UpdatedAt: The date and time when the comment was last updated.",
                    "type": "string"
                },
                "videoId": {
                    "description": "VideoId: The ID of the video the comment refers to, if any.",
                    "type": "string"
                },
                "viewerRating": {
                    "description": "ViewerRating: The rating the viewer has given to this comment. For\nthe time being this will never return RATE_TYPE_DISLIKE and instead\nreturn RATE_TYPE_NONE. This may change in the future.\n\nPossible values:\n  \"none\"\n  \"like\" - The entity is liked.\n  \"dislike\" - The entity is disliked.",
                    "type": "string"
                }
            }
        },
        "youtube.CommentSnippetAuthorChannelId": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "youtube.Thumbnail": {
            "type": "object",
            "properties": {
                "height": {
                    "description": "Height: (Optional) Height of the thumbnail image.",
                    "type": "integer"
                },
                "url": {
                    "description": "Url: The thumbnail image's URL.",
                    "type": "string"
                },
                "width": {
                    "description": "Width: (Optional) Width of the thumbnail image.",
                    "type": "integer"
                }
            }
        },
        "youtube.ThumbnailDetails": {
            "type": "object",
            "properties": {
                "default": {
                    "description": "Default: The default image for this resource.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/youtube.Thumbnail"
                        }
                    ]
                },
                "high": {
                    "description": "High: The high quality image for this resource.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/youtube.Thumbnail"
                        }
                    ]
                },
                "maxres": {
                    "description": "Maxres: The maximum resolution quality image for this resource.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/youtube.Thumbnail"
                        }
                    ]
                },
                "medium": {
                    "description": "Medium: The medium quality image for this resource.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/youtube.Thumbnail"
                        }
                    ]
                },
                "standard": {
                    "description": "Standard: The standard quality image for this resource.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/youtube.Thumbnail"
                        }
                    ]
                }
            }
        },
        "youtube.VideoLocalization": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description: Localized version of the video's description.",
                    "type": "string"
                },
                "title": {
                    "description": "Title: Localized version of the video's title.",
                    "type": "string"
                }
            }
        },
        "youtube.VideoSnippet": {
            "type": "object",
            "properties": {
                "categoryId": {
                    "description": "CategoryId: The YouTube video category associated with the video.",
                    "type": "string"
                },
                "channelId": {
                    "description": "ChannelId: The ID that YouTube uses to uniquely identify the channel\nthat the video was uploaded to.",
                    "type": "string"
                },
                "channelTitle": {
                    "description": "ChannelTitle: Channel title for the channel that the video belongs\nto.",
                    "type": "string"
                },
                "defaultAudioLanguage": {
                    "description": "DefaultAudioLanguage: The default_audio_language property specifies\nthe language spoken in the video's default audio track.",
                    "type": "string"
                },
                "defaultLanguage": {
                    "description": "DefaultLanguage: The language of the videos's default snippet.",
                    "type": "string"
                },
                "description": {
                    "description": "Description: The video's description. @mutable youtube.videos.insert\nyoutube.videos.update",
                    "type": "string"
                },
                "liveBroadcastContent": {
                    "description": "LiveBroadcastContent: Indicates if the video is an upcoming/active\nlive broadcast. Or it's \"none\" if the video is not an upcoming/active\nlive broadcast.\n\nPossible values:\n  \"none\"\n  \"upcoming\" - The live broadcast is upcoming.\n  \"live\" - The live broadcast is active.\n  \"completed\" - The live broadcast has been completed.",
                    "type": "string"
                },
                "localized": {
                    "description": "Localized: Localized snippet selected with the hl parameter. If no\nsuch localization exists, this field is populated with the default\nsnippet. (Read-only)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/youtube.VideoLocalization"
                        }
                    ]
                },
                "publishedAt": {
                    "description": "PublishedAt: The date and time when the video was uploaded.",
                    "type": "string"
                },
                "tags": {
                    "description": "Tags: A list of keyword tags associated with the video. Tags may\ncontain spaces.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "thumbnails": {
                    "description": "Thumbnails: A map of thumbnail images associated with the video. For\neach object in the map, the key is the name of the thumbnail image,\nand the value is an object that contains other information about the\nthumbnail.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/youtube.ThumbnailDetails"
                        }
                    ]
                },
                "title": {
                    "description": "Title: The video's title. @mutable youtube.videos.insert\nyoutube.videos.update",
                    "type": "string"
                }
            }
        },
        "youtube.VideoStatistics": {
            "type": "object",
            "properties": {
                "commentCount": {
                    "description": "CommentCount: The number of comments for the video.",
                    "type": "string",
                    "example": "0"
                },
                "dislikeCount": {
                    "description": "DislikeCount: The number of users who have indicated that they\ndisliked the video by giving it a negative rating.",
                    "type": "string",
                    "example": "0"
                },
                "favoriteCount": {
                    "description": "FavoriteCount: The number of users who currently have the video\nmarked as a favorite video.",
                    "type": "string",
                    "example": "0"
                },
                "likeCount": {
                    "description": "LikeCount: The number of users who have indicated that they liked the\nvideo by giving it a positive rating.",
                    "type": "string",
                    "example": "0"
                },
                "viewCount": {
                    "description": "ViewCount: The number of times the video has been viewed.",
                    "type": "string",
                    "example": "0"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8001",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "GPTube API swagger docs",
	Description:      "This is the API documentation of GPTube",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
