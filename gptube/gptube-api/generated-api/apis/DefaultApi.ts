/* tslint:disable */
/* eslint-disable */
/**
 * GPTube API swagger docs
 * This is the API documentation of GPTube
 *
 * The version of the OpenAPI document: 1.0
 * Contact: luckly083@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FiberError,
  HandlersHelloApiMessage,
  ModelsYoutubeAnalyzerLandingReqBody,
  ModelsYoutubeAnalyzerLandingRespBody,
  ModelsYoutubeAnalyzerReqBody,
  ModelsYoutubeAnalyzerRespBody,
  ModelsYoutubePreAnalyzerReqBody,
  ModelsYoutubePreAnalyzerRespBody,
  ModelsYoutubeVideoAnalyzed,
  ModelsYoutubeVideoNegativeCommentsRespBody,
  ModelsYoutubeVideosRespBody,
  UtilsHandleErrorErrorResponse,
} from '../models/index';
import {
    FiberErrorFromJSON,
    FiberErrorToJSON,
    HandlersHelloApiMessageFromJSON,
    HandlersHelloApiMessageToJSON,
    ModelsYoutubeAnalyzerLandingReqBodyFromJSON,
    ModelsYoutubeAnalyzerLandingReqBodyToJSON,
    ModelsYoutubeAnalyzerLandingRespBodyFromJSON,
    ModelsYoutubeAnalyzerLandingRespBodyToJSON,
    ModelsYoutubeAnalyzerReqBodyFromJSON,
    ModelsYoutubeAnalyzerReqBodyToJSON,
    ModelsYoutubeAnalyzerRespBodyFromJSON,
    ModelsYoutubeAnalyzerRespBodyToJSON,
    ModelsYoutubePreAnalyzerReqBodyFromJSON,
    ModelsYoutubePreAnalyzerReqBodyToJSON,
    ModelsYoutubePreAnalyzerRespBodyFromJSON,
    ModelsYoutubePreAnalyzerRespBodyToJSON,
    ModelsYoutubeVideoAnalyzedFromJSON,
    ModelsYoutubeVideoAnalyzedToJSON,
    ModelsYoutubeVideoNegativeCommentsRespBodyFromJSON,
    ModelsYoutubeVideoNegativeCommentsRespBodyToJSON,
    ModelsYoutubeVideosRespBodyFromJSON,
    ModelsYoutubeVideosRespBodyToJSON,
    UtilsHandleErrorErrorResponseFromJSON,
    UtilsHandleErrorErrorResponseToJSON,
} from '../models/index';

export interface ApiYoutubeAnalysisLandingPostRequest {
    video: ModelsYoutubeAnalyzerLandingReqBody;
}

export interface ApiYoutubeAnalysisPostRequest {
    video: ModelsYoutubeAnalyzerReqBody;
}

export interface ApiYoutubePreAnalysisPostRequest {
    video: ModelsYoutubePreAnalyzerReqBody;
}

export interface ApiYoutubeVideosGetRequest {
    accountEmail: string;
    page?: number;
    pageSize?: number;
}

export interface ApiYoutubeVideosVideoIdGetRequest {
    videoId: string;
    accountEmail: string;
}

export interface ApiYoutubeVideosVideoIdNegativeCommentsGetRequest {
    videoId: string;
    accountEmail: string;
    page?: number;
    pageSize?: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * An endpoint used to test the api stability
     * Hello message from the api
     */
    async apiGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersHelloApiMessage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersHelloApiMessageFromJSON(jsonValue));
    }

    /**
     * An endpoint used to test the api stability
     * Hello message from the api
     */
    async apiGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersHelloApiMessage> {
        const response = await this.apiGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * An endpoint used to do a simple analysis with the BERT model to show a result in the landing
     * Simple analysis with BERT model for the landing page
     */
    async apiYoutubeAnalysisLandingPostRaw(requestParameters: ApiYoutubeAnalysisLandingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsYoutubeAnalyzerLandingRespBody>> {
        if (requestParameters.video === null || requestParameters.video === undefined) {
            throw new runtime.RequiredError('video','Required parameter requestParameters.video was null or undefined when calling apiYoutubeAnalysisLandingPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/youtube/analysis-landing`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelsYoutubeAnalyzerLandingReqBodyToJSON(requestParameters.video),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsYoutubeAnalyzerLandingRespBodyFromJSON(jsonValue));
    }

    /**
     * An endpoint used to do a simple analysis with the BERT model to show a result in the landing
     * Simple analysis with BERT model for the landing page
     */
    async apiYoutubeAnalysisLandingPost(requestParameters: ApiYoutubeAnalysisLandingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsYoutubeAnalyzerLandingRespBody> {
        const response = await this.apiYoutubeAnalysisLandingPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * An endpoint used to analyze the content of a video using BERT and RoBERTa model and ChatGPT.
     * Performs the analysis of the youtube video
     */
    async apiYoutubeAnalysisPostRaw(requestParameters: ApiYoutubeAnalysisPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsYoutubeAnalyzerRespBody>> {
        if (requestParameters.video === null || requestParameters.video === undefined) {
            throw new runtime.RequiredError('video','Required parameter requestParameters.video was null or undefined when calling apiYoutubeAnalysisPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/youtube/analysis`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelsYoutubeAnalyzerReqBodyToJSON(requestParameters.video),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsYoutubeAnalyzerRespBodyFromJSON(jsonValue));
    }

    /**
     * An endpoint used to analyze the content of a video using BERT and RoBERTa model and ChatGPT.
     * Performs the analysis of the youtube video
     */
    async apiYoutubeAnalysisPost(requestParameters: ApiYoutubeAnalysisPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsYoutubeAnalyzerRespBody> {
        const response = await this.apiYoutubeAnalysisPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * An endpoint used to retrieve basic information about the youtube video such as title, description, etc.
     * Basic information about the youtube video
     */
    async apiYoutubePreAnalysisPostRaw(requestParameters: ApiYoutubePreAnalysisPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsYoutubePreAnalyzerRespBody>> {
        if (requestParameters.video === null || requestParameters.video === undefined) {
            throw new runtime.RequiredError('video','Required parameter requestParameters.video was null or undefined when calling apiYoutubePreAnalysisPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/youtube/pre-analysis`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelsYoutubePreAnalyzerReqBodyToJSON(requestParameters.video),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsYoutubePreAnalyzerRespBodyFromJSON(jsonValue));
    }

    /**
     * An endpoint used to retrieve basic information about the youtube video such as title, description, etc.
     * Basic information about the youtube video
     */
    async apiYoutubePreAnalysisPost(requestParameters: ApiYoutubePreAnalysisPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsYoutubePreAnalyzerRespBody> {
        const response = await this.apiYoutubePreAnalysisPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * An endpoint to retrieve all the youtube videos that a user has analyzed, results are sorted by last_update field.
     * Get all the videos related to a user in paginated mode
     */
    async apiYoutubeVideosGetRaw(requestParameters: ApiYoutubeVideosGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsYoutubeVideosRespBody>> {
        if (requestParameters.accountEmail === null || requestParameters.accountEmail === undefined) {
            throw new runtime.RequiredError('accountEmail','Required parameter requestParameters.accountEmail was null or undefined when calling apiYoutubeVideosGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.accountEmail !== undefined) {
            queryParameters['account_email'] = requestParameters.accountEmail;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/youtube/videos`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsYoutubeVideosRespBodyFromJSON(jsonValue));
    }

    /**
     * An endpoint to retrieve all the youtube videos that a user has analyzed, results are sorted by last_update field.
     * Get all the videos related to a user in paginated mode
     */
    async apiYoutubeVideosGet(requestParameters: ApiYoutubeVideosGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsYoutubeVideosRespBody> {
        const response = await this.apiYoutubeVideosGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * An endpoint to retrieve the data for a video and its analysis results.
     * Get the analysis results and data for a video
     */
    async apiYoutubeVideosVideoIdGetRaw(requestParameters: ApiYoutubeVideosVideoIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsYoutubeVideoAnalyzed>> {
        if (requestParameters.videoId === null || requestParameters.videoId === undefined) {
            throw new runtime.RequiredError('videoId','Required parameter requestParameters.videoId was null or undefined when calling apiYoutubeVideosVideoIdGet.');
        }

        if (requestParameters.accountEmail === null || requestParameters.accountEmail === undefined) {
            throw new runtime.RequiredError('accountEmail','Required parameter requestParameters.accountEmail was null or undefined when calling apiYoutubeVideosVideoIdGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.accountEmail !== undefined) {
            queryParameters['account_email'] = requestParameters.accountEmail;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/youtube/videos/{videoId}`.replace(`{${"videoId"}}`, encodeURIComponent(String(requestParameters.videoId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsYoutubeVideoAnalyzedFromJSON(jsonValue));
    }

    /**
     * An endpoint to retrieve the data for a video and its analysis results.
     * Get the analysis results and data for a video
     */
    async apiYoutubeVideosVideoIdGet(requestParameters: ApiYoutubeVideosVideoIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsYoutubeVideoAnalyzed> {
        const response = await this.apiYoutubeVideosVideoIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * An endpoint to retrieve the data for a video and its analysis results.
     * Get the analysis results and data for a video
     */
    async apiYoutubeVideosVideoIdNegativeCommentsGetRaw(requestParameters: ApiYoutubeVideosVideoIdNegativeCommentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsYoutubeVideoNegativeCommentsRespBody>> {
        if (requestParameters.videoId === null || requestParameters.videoId === undefined) {
            throw new runtime.RequiredError('videoId','Required parameter requestParameters.videoId was null or undefined when calling apiYoutubeVideosVideoIdNegativeCommentsGet.');
        }

        if (requestParameters.accountEmail === null || requestParameters.accountEmail === undefined) {
            throw new runtime.RequiredError('accountEmail','Required parameter requestParameters.accountEmail was null or undefined when calling apiYoutubeVideosVideoIdNegativeCommentsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.accountEmail !== undefined) {
            queryParameters['account_email'] = requestParameters.accountEmail;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/youtube/videos/{videoId}/negative-comments`.replace(`{${"videoId"}}`, encodeURIComponent(String(requestParameters.videoId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsYoutubeVideoNegativeCommentsRespBodyFromJSON(jsonValue));
    }

    /**
     * An endpoint to retrieve the data for a video and its analysis results.
     * Get the analysis results and data for a video
     */
    async apiYoutubeVideosVideoIdNegativeCommentsGet(requestParameters: ApiYoutubeVideosVideoIdNegativeCommentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsYoutubeVideoNegativeCommentsRespBody> {
        const response = await this.apiYoutubeVideosVideoIdNegativeCommentsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * An endpoint used to test the billing api stability
     * Hello message from the billing api
     */
    async billingGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersHelloApiMessage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/billing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersHelloApiMessageFromJSON(jsonValue));
    }

    /**
     * An endpoint used to test the billing api stability
     * Hello message from the billing api
     */
    async billingGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersHelloApiMessage> {
        const response = await this.billingGetRaw(initOverrides);
        return await response.value();
    }

}
