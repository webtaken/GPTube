/* tslint:disable */
/* eslint-disable */
/**
 * GPTube API swagger docs
 * This is the API documentation of GPTube
 *
 * The version of the OpenAPI document: 1.0
 * Contact: luckly083@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ModelsBertAIResults } from './ModelsBertAIResults';
import {
    ModelsBertAIResultsFromJSON,
    ModelsBertAIResultsFromJSONTyped,
    ModelsBertAIResultsToJSON,
} from './ModelsBertAIResults';

/**
 * 
 * @export
 * @interface ModelsYoutubeAnalysisLandingResults
 */
export interface ModelsYoutubeAnalysisLandingResults {
    /**
     * 
     * @type {ModelsBertAIResults}
     * @memberof ModelsYoutubeAnalysisLandingResults
     */
    bertResults?: ModelsBertAIResults;
    /**
     * 
     * @type {string}
     * @memberof ModelsYoutubeAnalysisLandingResults
     */
    videoId?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsYoutubeAnalysisLandingResults
     */
    videoTitle?: string;
}

/**
 * Check if a given object implements the ModelsYoutubeAnalysisLandingResults interface.
 */
export function instanceOfModelsYoutubeAnalysisLandingResults(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ModelsYoutubeAnalysisLandingResultsFromJSON(json: any): ModelsYoutubeAnalysisLandingResults {
    return ModelsYoutubeAnalysisLandingResultsFromJSONTyped(json, false);
}

export function ModelsYoutubeAnalysisLandingResultsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelsYoutubeAnalysisLandingResults {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'bertResults': !exists(json, 'bert_results') ? undefined : ModelsBertAIResultsFromJSON(json['bert_results']),
        'videoId': !exists(json, 'video_id') ? undefined : json['video_id'],
        'videoTitle': !exists(json, 'video_title') ? undefined : json['video_title'],
    };
}

export function ModelsYoutubeAnalysisLandingResultsToJSON(value?: ModelsYoutubeAnalysisLandingResults | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'bert_results': ModelsBertAIResultsToJSON(value.bertResults),
        'video_id': value.videoId,
        'video_title': value.videoTitle,
    };
}

