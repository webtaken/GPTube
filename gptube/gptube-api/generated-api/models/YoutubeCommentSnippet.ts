/* tslint:disable */
/* eslint-disable */
/**
 * GPTube API swagger docs
 * This is the API documentation of GPTube
 *
 * The version of the OpenAPI document: 1.0
 * Contact: luckly083@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { YoutubeCommentSnippetAuthorChannelId } from './YoutubeCommentSnippetAuthorChannelId';
import {
    YoutubeCommentSnippetAuthorChannelIdFromJSON,
    YoutubeCommentSnippetAuthorChannelIdFromJSONTyped,
    YoutubeCommentSnippetAuthorChannelIdToJSON,
} from './YoutubeCommentSnippetAuthorChannelId';

/**
 * 
 * @export
 * @interface YoutubeCommentSnippet
 */
export interface YoutubeCommentSnippet {
    /**
     * 
     * @type {YoutubeCommentSnippetAuthorChannelId}
     * @memberof YoutubeCommentSnippet
     */
    authorChannelId?: YoutubeCommentSnippetAuthorChannelId;
    /**
     * AuthorChannelUrl: Link to the author's YouTube channel, if any.
     * @type {string}
     * @memberof YoutubeCommentSnippet
     */
    authorChannelUrl?: string;
    /**
     * AuthorDisplayName: The name of the user who posted the comment.
     * @type {string}
     * @memberof YoutubeCommentSnippet
     */
    authorDisplayName?: string;
    /**
     * AuthorProfileImageUrl: The URL for the avatar of the user who posted
     * the comment.
     * @type {string}
     * @memberof YoutubeCommentSnippet
     */
    authorProfileImageUrl?: string;
    /**
     * CanRate: Whether the current viewer can rate this comment.
     * @type {boolean}
     * @memberof YoutubeCommentSnippet
     */
    canRate?: boolean;
    /**
     * ChannelId: The id of the corresponding YouTube channel. In case of a
     * channel comment this is the channel the comment refers to. In case of
     * a video comment it's the video's channel.
     * @type {string}
     * @memberof YoutubeCommentSnippet
     */
    channelId?: string;
    /**
     * LikeCount: The total number of likes this comment has received.
     * @type {number}
     * @memberof YoutubeCommentSnippet
     */
    likeCount?: number;
    /**
     * ModerationStatus: The comment's moderation status. Will not be set if
     * the comments were requested through the id filter.
     * 
     * Possible values:
     *   "published" - The comment is available for public display.
     *   "heldForReview" - The comment is awaiting review by a moderator.
     *   "likelySpam"
     *   "rejected" - The comment is unfit for display.
     * @type {string}
     * @memberof YoutubeCommentSnippet
     */
    moderationStatus?: string;
    /**
     * ParentId: The unique id of the parent comment, only set for replies.
     * @type {string}
     * @memberof YoutubeCommentSnippet
     */
    parentId?: string;
    /**
     * PublishedAt: The date and time when the comment was originally
     * published.
     * @type {string}
     * @memberof YoutubeCommentSnippet
     */
    publishedAt?: string;
    /**
     * TextDisplay: The comment's text. The format is either plain text or
     * HTML dependent on what has been requested. Even the plain text
     * representation may differ from the text originally posted in that it
     * may replace video links with video titles etc.
     * @type {string}
     * @memberof YoutubeCommentSnippet
     */
    textDisplay?: string;
    /**
     * TextOriginal: The comment's original raw text as initially posted or
     * last updated. The original text will only be returned if it is
     * accessible to the viewer, which is only guaranteed if the viewer is
     * the comment's author.
     * @type {string}
     * @memberof YoutubeCommentSnippet
     */
    textOriginal?: string;
    /**
     * UpdatedAt: The date and time when the comment was last updated.
     * @type {string}
     * @memberof YoutubeCommentSnippet
     */
    updatedAt?: string;
    /**
     * VideoId: The ID of the video the comment refers to, if any.
     * @type {string}
     * @memberof YoutubeCommentSnippet
     */
    videoId?: string;
    /**
     * ViewerRating: The rating the viewer has given to this comment. For
     * the time being this will never return RATE_TYPE_DISLIKE and instead
     * return RATE_TYPE_NONE. This may change in the future.
     * 
     * Possible values:
     *   "none"
     *   "like" - The entity is liked.
     *   "dislike" - The entity is disliked.
     * @type {string}
     * @memberof YoutubeCommentSnippet
     */
    viewerRating?: string;
}

/**
 * Check if a given object implements the YoutubeCommentSnippet interface.
 */
export function instanceOfYoutubeCommentSnippet(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function YoutubeCommentSnippetFromJSON(json: any): YoutubeCommentSnippet {
    return YoutubeCommentSnippetFromJSONTyped(json, false);
}

export function YoutubeCommentSnippetFromJSONTyped(json: any, ignoreDiscriminator: boolean): YoutubeCommentSnippet {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'authorChannelId': !exists(json, 'authorChannelId') ? undefined : YoutubeCommentSnippetAuthorChannelIdFromJSON(json['authorChannelId']),
        'authorChannelUrl': !exists(json, 'authorChannelUrl') ? undefined : json['authorChannelUrl'],
        'authorDisplayName': !exists(json, 'authorDisplayName') ? undefined : json['authorDisplayName'],
        'authorProfileImageUrl': !exists(json, 'authorProfileImageUrl') ? undefined : json['authorProfileImageUrl'],
        'canRate': !exists(json, 'canRate') ? undefined : json['canRate'],
        'channelId': !exists(json, 'channelId') ? undefined : json['channelId'],
        'likeCount': !exists(json, 'likeCount') ? undefined : json['likeCount'],
        'moderationStatus': !exists(json, 'moderationStatus') ? undefined : json['moderationStatus'],
        'parentId': !exists(json, 'parentId') ? undefined : json['parentId'],
        'publishedAt': !exists(json, 'publishedAt') ? undefined : json['publishedAt'],
        'textDisplay': !exists(json, 'textDisplay') ? undefined : json['textDisplay'],
        'textOriginal': !exists(json, 'textOriginal') ? undefined : json['textOriginal'],
        'updatedAt': !exists(json, 'updatedAt') ? undefined : json['updatedAt'],
        'videoId': !exists(json, 'videoId') ? undefined : json['videoId'],
        'viewerRating': !exists(json, 'viewerRating') ? undefined : json['viewerRating'],
    };
}

export function YoutubeCommentSnippetToJSON(value?: YoutubeCommentSnippet | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'authorChannelId': YoutubeCommentSnippetAuthorChannelIdToJSON(value.authorChannelId),
        'authorChannelUrl': value.authorChannelUrl,
        'authorDisplayName': value.authorDisplayName,
        'authorProfileImageUrl': value.authorProfileImageUrl,
        'canRate': value.canRate,
        'channelId': value.channelId,
        'likeCount': value.likeCount,
        'moderationStatus': value.moderationStatus,
        'parentId': value.parentId,
        'publishedAt': value.publishedAt,
        'textDisplay': value.textDisplay,
        'textOriginal': value.textOriginal,
        'updatedAt': value.updatedAt,
        'videoId': value.videoId,
        'viewerRating': value.viewerRating,
    };
}

