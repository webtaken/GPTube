/* tslint:disable */
/* eslint-disable */
/**
 * GPTube API swagger docs
 * This is the API documentation of GPTube
 *
 * The version of the OpenAPI document: 1.0
 * Contact: luckly083@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { YoutubeThumbnailDetails } from './YoutubeThumbnailDetails';
import {
    YoutubeThumbnailDetailsFromJSON,
    YoutubeThumbnailDetailsFromJSONTyped,
    YoutubeThumbnailDetailsToJSON,
} from './YoutubeThumbnailDetails';
import type { YoutubeVideoLocalization } from './YoutubeVideoLocalization';
import {
    YoutubeVideoLocalizationFromJSON,
    YoutubeVideoLocalizationFromJSONTyped,
    YoutubeVideoLocalizationToJSON,
} from './YoutubeVideoLocalization';

/**
 * 
 * @export
 * @interface YoutubeVideoSnippet
 */
export interface YoutubeVideoSnippet {
    /**
     * CategoryId: The YouTube video category associated with the video.
     * @type {string}
     * @memberof YoutubeVideoSnippet
     */
    categoryId?: string;
    /**
     * ChannelId: The ID that YouTube uses to uniquely identify the channel
     * that the video was uploaded to.
     * @type {string}
     * @memberof YoutubeVideoSnippet
     */
    channelId?: string;
    /**
     * ChannelTitle: Channel title for the channel that the video belongs
     * to.
     * @type {string}
     * @memberof YoutubeVideoSnippet
     */
    channelTitle?: string;
    /**
     * DefaultAudioLanguage: The default_audio_language property specifies
     * the language spoken in the video's default audio track.
     * @type {string}
     * @memberof YoutubeVideoSnippet
     */
    defaultAudioLanguage?: string;
    /**
     * DefaultLanguage: The language of the videos's default snippet.
     * @type {string}
     * @memberof YoutubeVideoSnippet
     */
    defaultLanguage?: string;
    /**
     * Description: The video's description. @mutable youtube.videos.insert
     * youtube.videos.update
     * @type {string}
     * @memberof YoutubeVideoSnippet
     */
    description?: string;
    /**
     * LiveBroadcastContent: Indicates if the video is an upcoming/active
     * live broadcast. Or it's "none" if the video is not an upcoming/active
     * live broadcast.
     * 
     * Possible values:
     *   "none"
     *   "upcoming" - The live broadcast is upcoming.
     *   "live" - The live broadcast is active.
     *   "completed" - The live broadcast has been completed.
     * @type {string}
     * @memberof YoutubeVideoSnippet
     */
    liveBroadcastContent?: string;
    /**
     * 
     * @type {YoutubeVideoLocalization}
     * @memberof YoutubeVideoSnippet
     */
    localized?: YoutubeVideoLocalization;
    /**
     * PublishedAt: The date and time when the video was uploaded.
     * @type {string}
     * @memberof YoutubeVideoSnippet
     */
    publishedAt?: string;
    /**
     * Tags: A list of keyword tags associated with the video. Tags may
     * contain spaces.
     * @type {Array<string>}
     * @memberof YoutubeVideoSnippet
     */
    tags?: Array<string>;
    /**
     * 
     * @type {YoutubeThumbnailDetails}
     * @memberof YoutubeVideoSnippet
     */
    thumbnails?: YoutubeThumbnailDetails;
    /**
     * Title: The video's title. @mutable youtube.videos.insert
     * youtube.videos.update
     * @type {string}
     * @memberof YoutubeVideoSnippet
     */
    title?: string;
}

/**
 * Check if a given object implements the YoutubeVideoSnippet interface.
 */
export function instanceOfYoutubeVideoSnippet(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function YoutubeVideoSnippetFromJSON(json: any): YoutubeVideoSnippet {
    return YoutubeVideoSnippetFromJSONTyped(json, false);
}

export function YoutubeVideoSnippetFromJSONTyped(json: any, ignoreDiscriminator: boolean): YoutubeVideoSnippet {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'categoryId': !exists(json, 'categoryId') ? undefined : json['categoryId'],
        'channelId': !exists(json, 'channelId') ? undefined : json['channelId'],
        'channelTitle': !exists(json, 'channelTitle') ? undefined : json['channelTitle'],
        'defaultAudioLanguage': !exists(json, 'defaultAudioLanguage') ? undefined : json['defaultAudioLanguage'],
        'defaultLanguage': !exists(json, 'defaultLanguage') ? undefined : json['defaultLanguage'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'liveBroadcastContent': !exists(json, 'liveBroadcastContent') ? undefined : json['liveBroadcastContent'],
        'localized': !exists(json, 'localized') ? undefined : YoutubeVideoLocalizationFromJSON(json['localized']),
        'publishedAt': !exists(json, 'publishedAt') ? undefined : json['publishedAt'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'thumbnails': !exists(json, 'thumbnails') ? undefined : YoutubeThumbnailDetailsFromJSON(json['thumbnails']),
        'title': !exists(json, 'title') ? undefined : json['title'],
    };
}

export function YoutubeVideoSnippetToJSON(value?: YoutubeVideoSnippet | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'categoryId': value.categoryId,
        'channelId': value.channelId,
        'channelTitle': value.channelTitle,
        'defaultAudioLanguage': value.defaultAudioLanguage,
        'defaultLanguage': value.defaultLanguage,
        'description': value.description,
        'liveBroadcastContent': value.liveBroadcastContent,
        'localized': YoutubeVideoLocalizationToJSON(value.localized),
        'publishedAt': value.publishedAt,
        'tags': value.tags,
        'thumbnails': YoutubeThumbnailDetailsToJSON(value.thumbnails),
        'title': value.title,
    };
}

